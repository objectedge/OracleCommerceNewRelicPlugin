# JDK home directory (because Ant may be using JRE)
jdk.home=${env.JAVA_HOME}

JBOSS_HOME=${env.JBOSS_HOME}

# ---------------------------------------------------------------------------------
# Dynamo enviroment properties.  Recommended that you set DYNAMO_HOME AND DAS_ROOT
# as environment properties for your OS.  Or you can set things here...
#
dynamo.home=${env.DYNAMO_HOME}
dynamo.root.dir=${dynamo.home}/..
das.root.dir=${dynamo.root.dir}/DAS
dynamo.servers.dir=${dynamo.home}/servers

# ---------------------------------------------------------------------------------
# Note: The property global.dir is specified in this module's build.xml.  Make sure
# this is set properly, especially if you are building a nested module structure
#
# This module is for running JUnit tests only. In order to assemble an EAR file
# with this module, you will need to update the "modules.to.assemble" property.
# Assembling this module with an EAR will allow running cactus tests against
# the running application.

# ---------------------------------------------------------------------------------
# Identifies the root parent for the module stack.  This is the default.  Individual
# modules use this to set the parent module.  They may override this at the sub
# module level. 
#
# If you are in an environment where only one ATG install is set up with multiple
# instances for each developer then use
#
# module.root.parent=root${user.name}
#
# This gives each engineer a deployment specific to them, ensuring no code or JSP
# conflicts will occur.
#
# If you are on your local machine then leave this be
#
module.root.parent=OE

# ---------------------------------------------------------------------------------
# This properties file is used to identify the name of this module and any
# specific values for tasks unique to this module
#
# these identify the module tree structure of this deployed submodule.  Usually 
# you'd leave all but ${module.name} alone.
#
module.name=NewRelic
install.unit=${default.install.unit}
module.parent=${module.root.parent}

# ---------------------------------------------------------------------------------
# J2EE Deployment settings
#
install.dir=${dynamo.root.dir}/${install.unit}/${module.parent}/${module.name}

install.j2ee.dir=${install.dir}/j2ee-apps

ears.to.assemble.id=ear.estore

# Basic directory settings
config.dir=${basedir}/config
inf.dir=${basedir}/META-INF
lib.dir=${basedir}/lib
src.dir=${basedir}/src
sql.dir=${basedir}/sql
javadoc.dir=${basedir}/javadoc
build.dir=${basedir}/build
build.tempconfig.dir=${build.dir}/tempconfig
build.config.dir=${build.dir}/config
javadoc.dir=${build.dir}/javadoc
classes.dir=${build.dir}/classes
testclasses.dir=${build.dir}/testclasses
reports.dir=${build.dir}/reports/junit
jacoco.dest=${build.dir}/reports/jacoco/jacoco.exec
ear.dir=${build.dir}/ear
javadoc.dir=${build.dir}/javadoc


# ---------------------------------------------------------------------------------
# Identifies the installation root for the Project.  All the applications 
# constructed for the project are loaded into this installation directory.
# This installation directory identifies itself as an ATG-Install-Unit which allows
# any modules within it to require ATG modules from different installation roots.
# For example, the ATG CampaignOptimizer product is a separate install unit.
#  
# Having a separate installation root for this project allows us to keep all 
# custom application modules together and still maintain references to modules 
# within other ATG install units.
#
default.install.unit=
